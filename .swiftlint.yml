###
# Swiftlint configuration file.
# Latest version supported: 0.16.1
# Any newer version hasn't been checked yet and might not follow the style guide.
#
# To update your local version of this file, execute the following command line:
# curl https://raw.githubusercontent.com/kevindelord/swift-style-guide/master/.swiftlint.yml > .swiftlint.yml
###

disabled_rules: # Rule identifiers to exclude from running
  - empty_parentheses_with_trailing_closure
  - closure_parameter_position
  - redundant_string_enum_value
  - vertical_parameter_alignment
  - trailing_whitespace
  - opening_brace
  - statement_position

excluded: # paths to ignore during linting. overridden by `included`.
  - VoiceStorm/3rdParty
  - VoiceStormUITests
  - Carthage
  - Pods
  - External
  - Submodules
  - Generated
  - Core/Model/CoreData
  - Database/Model
  - fastlane

# configurable rules can be customized from this configuration file
# binary rules can set their severity level
force_cast: warning # implicitly

# rule parameters
file_length:
  - 600 #warning
  - 800 #error

function_body_length:
  - 40 #warning
  - 80 #error

line_length:
  - 300 #warning
  - 350 #error

type_body_length:
  - 400 #warning
  - 500 #error

# naming rules can set warnings/errors for min_length and max_length
# additionally they can set excluded names
type_name:
  min_length: 2 # only warning
  max_length: # warning and error
    warning: 50
    error: 70

identifier_name:
  min_length: 2
  excluded: # excluded via string array
    - id
    - URL
    - GlobalAPIKey

large_tuple:
  - 4 #warning
  - 6 #error

opt_in_rules:
  - missing_docs
  - force_unwrapping
  - private_outlet
  - vertical_whitespace
  - closure_spacing
  - explicit_init
  - redundant_nil_coalescing
  - nimble_operator
  - closure_end_indentation
  - empty_count
  - private_outlet

reporter: "xcode" # reporter type (xcode, json, csv, checkstyle, junit, html, emoji)

custom_rules:
  vertical_whitespace_before_opening_braces:
    included: ".*.swift"
    regex: '[ \t]*(if|while|func|do|catch|class|enum|else|init|var|extension)\V*\{[ \t]*'
    name: "Vertical Whitespace missing before Opening Braces"
    message: "Include vertical whitespace (empty line) before opening braces."
    severity: warning
  vertical_whitespace_after_closing_braces:
    included: ".*.swift"
    regex: '\} *\w'
    name: "Vertical Whitespace missing after Closing Braces"
    message: "Include vertical whitespace (empty line) after closing braces."
    severity: warning
  empty_commented_line:
    name: "Empty Commented Out Line"
    regex: '(\t+| +)//\n'
    message: "Remove useless comment lines or use /* format */"
    severity: warning
  comments_space:
    name: "Space After Comment"
    regex: '(^ *//\w+)'
    message: "There should be a space after //"
    severity: warning
  empty_first_line:
    name: "Empty First Line"
    regex: '(^[ a-zA-Z ]*(?:protocol|extension|class|struct) (?!(?:var|let))[ a-zA-Z:]*\{\n *\S+)'
    message: "There should be an empty line after a declaration"
    severity: warning
  empty_line_after_super:
    name: "Empty Line After Super"
    regex: '(^ *super\.[ a-zA-Z0-9=?.\(\)\{\}:,><!]*\n *(?!(?:\}|return))\S+)'
    message: "There should be an empty line after super"
    severity: warning
  unnecessary_leading_void_in:
    name: "Unnecessary -> Void in at the end of the line"
    regex: '(-> (Void|\(\)) in$)'
    message: "Unnecessary '-> Void in' at the end of the line. Use only 'in'"
    severity: warning
  unnecessary_type:
    name: "Unnecessary Type"
    regex: '(?sm)[ \ta-zA-Z0-9]?(?:let|var){1} [ \ta-zA-Z0-9]+?:[ \t]+?([a-zA-Z0-9]+?)[\t ]+?=[\t ]?\1'
    message: "Type Definition Not Needed"
    severity: warning
  empty_closure_params:
    name: "Empty closure params"
    regex: '\{ (\(\) -> Void in)$'
    message: "`() -> Void in` should be avoided"
    severity: warning
  missing_closure_datatype:
    name: "Missing Closure Data Type"
    regex: '(\{[\s]{1}(\[weak [\w]+?\][\s]{1})*?\([^:]+?\)[\s]{1}in)'
    message: "Data Type in Closure is missing"
    severity: warning
  invalid_mark_format:
    name: "Invalid MARK Format"
    regex: '(?m-s)(\/\/[\s]*?MARK(?!(\:[\s]{1}\-[\s]{1}){1}))'
    message: "Use format: MARK: - Your Info"
    severity: warning
  unnecessary_space:
    name: "Unnecessary Space"
    regex: '(\[[a-zA-Z]+? {1}: {1}[a-zA-Z]+?\])'
    message: "Unnecessary space. use [DataType: DataType]."
    severity: warning
  missing_space:
    name: "Missing Space"
    regex: '(\[[a-zA-Z]+?:[a-zA-Z]+?\])'
    message: "Missing space. use [DataType: DataType]."
    severity: warning
